name: Windows Build

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    timeout-minutes: 60
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2
      
    - name: Enable Corepack
      run: corepack enable
      
    - name: Install correct Yarn version
      run: corepack prepare yarn@4.9.1 --activate
      
    - name: Install dependencies
      run: yarn install --immutable
      
    - name: Apply patches
      run: yarn postinstall
      
    - name: Compile TypeScript
      run: yarn compile
      
    - name: Initialize Windows project
      run: npx react-native init-windows --template cpp-app --namespace APMWindows --overwrite
      
    - name: Fix Windows App SDK path issues
      shell: pwsh
      run: |
        Write-Host "Fixing Windows App SDK path issues..."
        
        # Find all possible NuGet package locations
        $possiblePaths = @(
          "C:\Users\runneradmin\.nuget\packages",
          "$env:USERPROFILE\.nuget\packages",
          "$env:NUGET_PACKAGES",
          "windows\packages"
        )
        
        $windowsAppSdkPath = $null
        foreach ($basePath in $possiblePaths) {
          if ($basePath -and (Test-Path $basePath)) {
            Write-Host "Checking path: $basePath"
            $sdkPath = Join-Path $basePath "microsoft.windowsappsdk"
            if (Test-Path $sdkPath) {
              $windowsAppSdkPath = Get-ChildItem $sdkPath -Directory | Select-Object -First 1 -ExpandProperty FullName
              if ($windowsAppSdkPath) {
                Write-Host "Found Windows App SDK at: $windowsAppSdkPath"
                break
              }
            }
          }
        }
        
        if ($windowsAppSdkPath) {
          # Create missing architecture-specific directories
          $libWin10Path = "$windowsAppSdkPath\lib\win10-"
          $runtimeWinPath = "$windowsAppSdkPath\runtimes\win-\native"
          
          Write-Host "Creating directory: $libWin10Path"
          New-Item -ItemType Directory -Path $libWin10Path -Force | Out-Null
          
          Write-Host "Creating directory: $runtimeWinPath"  
          New-Item -ItemType Directory -Path $runtimeWinPath -Force | Out-Null
          
          # Copy x64 files to the missing paths
          $libX64Path = "$windowsAppSdkPath\lib\win10-x64"
          if (Test-Path $libX64Path) {
            Write-Host "Copying from $libX64Path to $libWin10Path"
            Copy-Item "$libX64Path\*" $libWin10Path -Recurse -Force
          }
          
          $runtimeX64Path = "$windowsAppSdkPath\runtimes\win-x64\native"
          if (Test-Path $runtimeX64Path) {
            Write-Host "Copying from $runtimeX64Path to $runtimeWinPath"
            Copy-Item "$runtimeX64Path\*" $runtimeWinPath -Recurse -Force
          }
        } else {
          Write-Host "Windows App SDK package not found, skipping path fixes"
        }
        
        # Fix Hermes DLL path issue
        $hermesFound = $false
        foreach ($basePath in $possiblePaths) {
          if ($basePath -and (Test-Path $basePath)) {
            $hermesPath = Join-Path $basePath "microsoft.javascript.hermes"
            if (Test-Path $hermesPath) {
              $hermesVersion = Get-ChildItem $hermesPath -Directory | Select-Object -First 1 -ExpandProperty Name
              if ($hermesVersion) {
                $hermesDllPath = "$hermesPath\$hermesVersion\build\native\uwp"
                $hermesX64Dll = "$hermesDllPath\x64\hermes.dll"
                $hermesTargetDll = "$hermesDllPath\hermes.dll"
                
                if ((Test-Path $hermesX64Dll) -and !(Test-Path $hermesTargetDll)) {
                  Write-Host "Copying Hermes DLL from $hermesX64Dll to $hermesTargetDll"
                  Copy-Item $hermesX64Dll $hermesTargetDll -Force
                  $hermesFound = $true
                }
                break
              }
            }
          }
        }
        
        if (-not $hermesFound) {
          Write-Host "Hermes package not found, skipping Hermes DLL fix"
        }
        
        Write-Host "Path fixes completed."
      
    - name: Build Windows app (Release x64)
      run: npx react-native run-windows --arch x64 --release --no-launch
      
    - name: Upload Windows build artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: windows-build-artifacts
        path: |
          windows/x64/Release/
          windows/AzusaPlayerMobile.Package/AppPackages/
        retention-days: 7